From 1945978784132b8771d56bcbb340d2e65dd87ec3 Mon Sep 17 00:00:00 2001
From: Gabriel Ravier <gabravier@gmail.com>
Date: Thu, 5 Jan 2023 18:42:29 +0100
Subject: [PATCH] Fix strcasecmp on negative and close-to-limits numbers
To: dietlibc@fefe.de

The subtraction at the end of stracasecmp does not handle the case
where one of the characters was below 26 or was negative in the first
place, meaning that the following program:

    #include <stdio.h>
    #include <strings.h>

    int main()
    {
         printf("%d\n", strcasecmp("\001", "\377"));
         printf("%d\n", strcasecmp("\x7f", "\x80"));
    }

Would result in positive numbers on dietlibc, even though it should
output negative numbers in both cases.

This patch fixes this by restoring the original values of the
characters when doing the final subtraction.

(note: part of this should only apply if char is signed, so the patch
contains a check for that)
---
 lib/strcasecmp.c | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/lib/strcasecmp.c b/lib/strcasecmp.c
index 5f5355c1..a4ad74de 100644
--- a/lib/strcasecmp.c
+++ b/lib/strcasecmp.c
@@ -1,4 +1,5 @@
 #include <strings.h>
+#include <limits.h>
 
 int  strcasecmp ( const char* s1, const char* s2 )
 {
@@ -15,5 +16,14 @@ int  strcasecmp ( const char* s1, const char* s2 )
             break;
     }
 
+    // If we keep x1 and x2 at their current value, this may result in completely incorrect results when comparing strings such as "\001" and "\377" or "\x7f" and "\x80"
+    x1 += 'A';
+    x2 += 'A';
+
+    // Needed in order to handle the case where one of the characters already had a negative char value
+    if (CHAR_MIN < 0 && x1 > INT_MAX)
+        x1 = UCHAR_MAX + 1 + x1;
+    if (CHAR_MIN < 0 && x2 > INT_MAX)
+        x2 = UCHAR_MAX + 1 + x2;
     return x1 - x2;
 }
-- 
2.38.1

