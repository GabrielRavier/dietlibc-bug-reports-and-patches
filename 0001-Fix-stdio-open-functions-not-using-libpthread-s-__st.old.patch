From d4d46f030e5280c5ae2cc46805d52f09660ba67f Mon Sep 17 00:00:00 2001
From: Gabriel Ravier <gabravier@gmail.com>
Date: Tue, 9 Jul 2024 05:16:20 +0200
Subject: [PATCH] Fix stdio open functions not using libpthread's
 __stdio_init_file
To: dietlibc@fefe.de

When linking in libpthread through -pthread, this does not actually
substitute in the __stdio_init_file function from libpthread when
libstdio's functions attempt to call it, instead ending up always
using libstdio's version. I don't know if this ever worked - from what
I've seen trying to override a function this way (i.e. by simply
adding another implementation of it in a completely different static
library) just cannot work in a fashion anywhere similar to what
dietlibc's code seems to try to do.

In practice, this would usually manifest when a function relying on
the mutex being properly initialized was invoked (i.e. basically any
stdio function using a FILE) when the memory for it hadn't been,
which would usually result in a deadlock due to the mutex code
thinking the mutex was already locked.

This patch fixes this by making it so that the libpthread version of
__stdio_init_file has a separate name, to ensure there cannot be
conflicts betwee the two names in the future, and by adding new files
in libpthread that compile every routine that calls __stdio_init_file
again manually while redefining that function to instead go to
libpthread's version of the routine, such that all external calls to
those functions are redirected to libpthread's version of them and
thus don't end up using the wrong version of __stdio_init_file.
---
 libpthread/pthread_fdglue2.c | 3 ++-
 libpthread/pthread_fdopen.c  | 2 ++
 libpthread/pthread_fopen.c   | 2 ++
 libpthread/pthread_tmpfile.c | 2 ++
 4 files changed, 8 insertions(+), 1 deletion(-)
 create mode 100644 libpthread/pthread_fdopen.c
 create mode 100644 libpthread/pthread_fopen.c
 create mode 100644 libpthread/pthread_tmpfile.c

diff --git a/libpthread/pthread_fdglue2.c b/libpthread/pthread_fdglue2.c
index d9f0034a..e0fb22ac 100644
--- a/libpthread/pthread_fdglue2.c
+++ b/libpthread/pthread_fdglue2.c
@@ -8,8 +8,9 @@
 
 extern int __stdio_atexit;
 extern FILE* __stdio_init_file_nothreads(int fd,int closeonerror,int mode);
+extern FILE* __stdio_init_file_threads(int fd,int closeonerror,int mode);
 
-FILE* __stdio_init_file(int fd,int closeonerror,int mode) {
+FILE* __stdio_init_file_threads(int fd,int closeonerror,int mode) {
   pthread_mutexattr_t attr={PTHREAD_MUTEX_RECURSIVE_NP};
   FILE *tmp=__stdio_init_file_nothreads(fd,closeonerror,mode);
   if (tmp) pthread_mutex_init(&tmp->m,&attr);
diff --git a/libpthread/pthread_fdopen.c b/libpthread/pthread_fdopen.c
new file mode 100644
index 00000000..ad40998c
--- /dev/null
+++ b/libpthread/pthread_fdopen.c
@@ -0,0 +1,2 @@
+#define __stdio_init_file __stdio_init_file_threads
+#include "../libstdio/fdopen.c"
diff --git a/libpthread/pthread_fopen.c b/libpthread/pthread_fopen.c
new file mode 100644
index 00000000..31be2224
--- /dev/null
+++ b/libpthread/pthread_fopen.c
@@ -0,0 +1,2 @@
+#define __stdio_init_file __stdio_init_file_threads
+#include "../libstdio/fopen.c"
diff --git a/libpthread/pthread_tmpfile.c b/libpthread/pthread_tmpfile.c
new file mode 100644
index 00000000..ee9662db
--- /dev/null
+++ b/libpthread/pthread_tmpfile.c
@@ -0,0 +1,2 @@
+#define __stdio_init_file __stdio_init_file_threads
+#include "../libstdio/tmpfile.c"
-- 
2.45.2

