From 687c4208880ca86c5348edf3d6f1e3999cd540d5 Mon Sep 17 00:00:00 2001
From: Gabriel Ravier <gabravier@gmail.com>
Date: Tue, 9 Jul 2024 13:19:45 +0200
Subject: [PATCH] Fix stdio open functions not using libpthread's
 __stdio_init_file
To: dietlibc@fefe.de

When linking in libpthread through -pthread, this does not actually
substitute in the __stdio_init_file function from libpthread when
libstdio's functions attempt to call it, instead ending up always
using libstdio's version. I don't know if this ever worked - from what
I've seen trying to override a function this way (i.e. by simply
adding another implementation of it in a completely different static
library) just cannot work in a fashion anywhere similar to what
dietlibc's code seems to try to do.

In practice, this would usually manifest when a function relying on
the mutex being properly initialized was invoked (i.e. basically any
stdio function using a FILE) when the memory for it hadn't been,
which would usually result in a deadlock due to the mutex code
thinking the mutex was already locked.

This patch fixes this by using ld's `--wrap` option to make it so that
all calls to `__stdio_init_file` are automatically redirected to
__wrap___stdio_init_file, which libpthread defines, while making sure
that the definition of `__stdio_init_file` in dietlibc is
diregarded. To make it so that references inside of dietlibc.a can
resolve to libpthread.a, the patch also adjusts diet.c to make it so
that when using libpthread, it links in libpthread.a and dietlibc.a a
second time (first to resolve referneces to __wrap___stdio_init_file,
then to resolve references from __wrap___stdio_init_file to routines
from dietlibc.a).
---
 diet.c                       | 13 +++++++++++--
 libpthread/pthread_fdglue2.c |  3 ++-
 2 files changed, 13 insertions(+), 3 deletions(-)

diff --git a/diet.c b/diet.c
index 2da8b7a6..7fb00e06 100644
--- a/diet.c
+++ b/diet.c
@@ -1,7 +1,7 @@
 #include <string.h>
 #include <unistd.h>
 #include <fcntl.h>
-#include <stdio.h>
+#include <stdbool.h>
 #include <stdlib.h>
 #include <write12.h>
 
@@ -81,6 +81,7 @@ int main(int argc,char *argv[]) {
   const char *nostdlib="-nostdlib";
   const char *libgcc="-lgcc";
   char *libpthread="-lpthread";
+  bool using_libpthread=false;
   char dashL[1000];
   char dashstatic[]="-static";
   int i;
@@ -376,7 +377,11 @@ pp:
       for (i=2; i<argc; ++i) {
 	if (!strcmp(argv[i],"-pthread")) {
 	  *dest++="-D_REENTRANT";
-	  if (_link) *dest++="-lpthread";
+	  if (_link) {
+	      *dest++="-Wl,--wrap=__stdio_init_file"; /* make it so calls to __stdio_init_file in libstdio are redirected to libpthread's version */
+	      *dest++=libpthread;
+	      using_libpthread=true;
+	  }
 	  continue;
 	}
 #if 0
@@ -455,6 +460,10 @@ incorporated:
 	    !strncmp(shortplatform,"arm",3)) {
 	  *dest++=c;
 	}
+	if (using_libpthread) {
+	    *dest++=libpthread; /* resolve any references to __wrap___stdio_init_file resulting from the previous --wrap=__stdio_init_file */
+	    *dest++=c; /* resolve any references to __stdio_init_file_nothreads resulting from us just having linked in __wrap___stdio_init_file */
+	}
       }
 #if defined(WANT_DYNAMIC) || defined(WANT_CTOR) || defined(WANT_EXCEPTIONS)
       if (_link) { *dest++=e; }
diff --git a/libpthread/pthread_fdglue2.c b/libpthread/pthread_fdglue2.c
index d9f0034a..2e4998c4 100644
--- a/libpthread/pthread_fdglue2.c
+++ b/libpthread/pthread_fdglue2.c
@@ -8,8 +8,9 @@
 
 extern int __stdio_atexit;
 extern FILE* __stdio_init_file_nothreads(int fd,int closeonerror,int mode);
+extern FILE* __wrap___stdio_init_file(int fd,int closeonerror,int mode);
 
-FILE* __stdio_init_file(int fd,int closeonerror,int mode) {
+FILE* __wrap___stdio_init_file(int fd,int closeonerror,int mode) {
   pthread_mutexattr_t attr={PTHREAD_MUTEX_RECURSIVE_NP};
   FILE *tmp=__stdio_init_file_nothreads(fd,closeonerror,mode);
   if (tmp) pthread_mutex_init(&tmp->m,&attr);
-- 
2.45.2

